/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Oasisscan API
 * Oasisscan API document
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import accountDebondingUsingGETMutator from '../largePages';
import accountDelegationsUsingGETMutator from '../largePages';
import accountInfoUsingGETMutator from '../largePages';
import accountListUsingGETMutator from '../largePages';
import accountRuntimeTransactionsUsingGETMutator from '../largePages';
import blockDetailUsingGETMutator from '../largePages';
import latestBlocksUsingGETMutator from '../largePages';
import getBlockByProposerUsingGETMutator from '../largePages';
import transactionMethodUsingGETMutator from '../largePages';
import latestTransactionsUsingGET1Mutator from '../largePages';
import searchUsingGETMutator from '../largePages';
import stakingEventsUsingGETMutator from '../largePages';
import stakingEventsUsingGET1Mutator from '../largePages';
import transactionDetailUsingGETMutator from '../largePages';
import transactionhistoryUsingGETMutator from '../largePages';
import latestTransactionsUsingGETMutator from '../largePages';
import networkUsingGETMutator from '../largePages';
import trendChartUsingGETMutator from '../largePages';
import proposalUsingGETMutator from '../largePages';
import proposalListUsingGETMutator from '../largePages';
import proposalsUsingGETMutator from '../largePages';
import proposalWithVotesUsingGETMutator from '../largePages';
import votesUsingGETMutator from '../largePages';
import chartUsingGETMutator from '../largePages';
import infoUsingGETMutator from '../largePages';
import runtimeListUsingGETMutator from '../largePages';
import roundInfoUsingGETMutator from '../largePages';
import roundListUsingGETMutator from '../largePages';
import runtimeStatsUsingGET1Mutator from '../largePages';
import runtimeStatsUsingGET2Mutator from '../largePages';
import runtimeStatsUsingGETMutator from '../largePages';
import delegatorsUsingGETMutator from '../largePages';
import escrowStatsUsingGETMutator from '../largePages';
import escrowStatsTotalUsingGETMutator from '../largePages';
import validatorInfoUsingGETMutator from '../largePages';
import validatorsUsingGETMutator from '../largePages';
import networkUsingGET1Mutator from '../largePages';
import validatorStatUsingGETMutator from '../largePages';
export type ValidatorStatUsingGETParams = {
/**
 * address
 */
address?: string;
/**
 * entityId
 */
entityId?: string;
};

export type ValidatorsUsingGETParams = {
/**
 * orderBy
 */
orderBy?: string;
/**
 * page
 */
page?: number;
/**
 * pageSize
 */
pageSize?: number;
/**
 * sort
 */
sort?: string;
};

export type ValidatorInfoUsingGETParams = {
/**
 * address
 */
address?: string;
/**
 * entityId
 */
entityId?: string;
};

export type EscrowStatsUsingGETParams = {
/**
 * address
 */
address: string;
};

export type DelegatorsUsingGETParams = {
/**
 * address
 */
address?: string;
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
/**
 * validator
 */
validator?: string;
};

export type RuntimeStatsUsingGETParams = {
/**
 * id
 */
id: string;
/**
 * page
 */
page?: number;
/**
 * round
 */
round?: number;
/**
 * size
 */
size?: number;
};

export type RuntimeStatsUsingGET2Params = {
/**
 * hash
 */
hash: string;
/**
 * id
 */
id: string;
/**
 * round
 */
round?: number;
};

export type RuntimeStatsUsingGET1Params = {
/**
 * id
 */
id: string;
/**
 * sort
 */
sort?: number;
};

export type RoundListUsingGETParams = {
/**
 * id
 */
id: string;
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type RoundInfoUsingGETParams = {
/**
 * id
 */
id: string;
/**
 * round
 */
round: number;
};

export type VotesUsingGETParams = {
/**
 * id
 */
id: number;
};

export type ProposalWithVotesUsingGETParams = {
/**
 * id
 */
id: number;
};

export type ProposalUsingGETParams = {
/**
 * id
 */
id: number;
};

export type LatestTransactionsUsingGETParams = {
/**
 * address
 */
address?: string;
/**
 * height
 */
height?: number;
/**
 * method
 */
method?: string;
/**
 * page
 */
page?: number;
/**
 * runtime
 */
runtime?: boolean;
/**
 * size
 */
size?: number;
};

export type StakingEventsUsingGET1Params = {
/**
 * id
 */
id: string;
};

export type StakingEventsUsingGETParams = {
/**
 * address
 */
address: string;
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type SearchUsingGETParams = {
/**
 * key
 */
key: string;
};

export type LatestTransactionsUsingGET1Params = {
/**
 * address
 */
address?: string;
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type GetBlockByProposerUsingGETParams = {
/**
 * address
 */
address?: string;
/**
 * page
 */
page?: number;
/**
 * proposer
 */
proposer?: string;
/**
 * size
 */
size?: number;
};

export type LatestBlocksUsingGETParams = {
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type AccountRuntimeTransactionsUsingGETParams = {
/**
 * address
 */
address: string;
/**
 * page
 */
page?: number;
/**
 * runtimeId
 */
runtimeId?: string;
/**
 * size
 */
size?: number;
};

export type AccountListUsingGETParams = {
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type AccountDelegationsUsingGETParams = {
/**
 * address
 */
address: string;
/**
 * all
 */
all?: boolean;
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type AccountDebondingUsingGETParams = {
/**
 * address
 */
address: string;
/**
 * page
 */
page?: number;
/**
 * size
 */
size?: number;
};

export type ApiResultData = { [key: string]: any };

export interface ApiResult {
  code?: number;
  data?: ApiResultData;
  message?: string;
}



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary accountDebonding
 */
export const accountDebondingUsingGET = (
    params: AccountDebondingUsingGETParams,
 options?: SecondParameter<typeof accountDebondingUsingGETMutator>,signal?: AbortSignal
) => {
      return accountDebondingUsingGETMutator<ApiResult>(
      {url: `/chain/account/debonding`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getAccountDebondingUsingGETQueryKey = (params: AccountDebondingUsingGETParams,) => [`/chain/account/debonding`, ...(params ? [params]: [])] as const;
  

    
export const getAccountDebondingUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof accountDebondingUsingGET>>, TError = unknown>(params: AccountDebondingUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountDebondingUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountDebondingUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof accountDebondingUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountDebondingUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof accountDebondingUsingGET>>> = ({ signal }) => accountDebondingUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type AccountDebondingUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof accountDebondingUsingGET>>>
export type AccountDebondingUsingGETQueryError = unknown

/**
 * @summary accountDebonding
 */
export const useAccountDebondingUsingGET = <TData = Awaited<ReturnType<typeof accountDebondingUsingGET>>, TError = unknown>(
 params: AccountDebondingUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountDebondingUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountDebondingUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAccountDebondingUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary accountDelegations
 */
export const accountDelegationsUsingGET = (
    params: AccountDelegationsUsingGETParams,
 options?: SecondParameter<typeof accountDelegationsUsingGETMutator>,signal?: AbortSignal
) => {
      return accountDelegationsUsingGETMutator<ApiResult>(
      {url: `/chain/account/delegations`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getAccountDelegationsUsingGETQueryKey = (params: AccountDelegationsUsingGETParams,) => [`/chain/account/delegations`, ...(params ? [params]: [])] as const;
  

    
export const getAccountDelegationsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof accountDelegationsUsingGET>>, TError = unknown>(params: AccountDelegationsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountDelegationsUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountDelegationsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof accountDelegationsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountDelegationsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof accountDelegationsUsingGET>>> = ({ signal }) => accountDelegationsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type AccountDelegationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof accountDelegationsUsingGET>>>
export type AccountDelegationsUsingGETQueryError = unknown

/**
 * @summary accountDelegations
 */
export const useAccountDelegationsUsingGET = <TData = Awaited<ReturnType<typeof accountDelegationsUsingGET>>, TError = unknown>(
 params: AccountDelegationsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountDelegationsUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountDelegationsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAccountDelegationsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary accountInfo
 */
export const accountInfoUsingGET = (
    account: string,
 options?: SecondParameter<typeof accountInfoUsingGETMutator>,signal?: AbortSignal
) => {
      return accountInfoUsingGETMutator<ApiResult>(
      {url: `/chain/account/info/${account}`, method: 'get', signal
    },
      options);
    }
  

export const getAccountInfoUsingGETQueryKey = (account: string,) => [`/chain/account/info/${account}`] as const;
  

    
export const getAccountInfoUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof accountInfoUsingGET>>, TError = unknown>(account: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountInfoUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountInfoUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof accountInfoUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountInfoUsingGETQueryKey(account);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof accountInfoUsingGET>>> = ({ signal }) => accountInfoUsingGET(account, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(account), ...queryOptions}}

export type AccountInfoUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof accountInfoUsingGET>>>
export type AccountInfoUsingGETQueryError = unknown

/**
 * @summary accountInfo
 */
export const useAccountInfoUsingGET = <TData = Awaited<ReturnType<typeof accountInfoUsingGET>>, TError = unknown>(
 account: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountInfoUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountInfoUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAccountInfoUsingGETQueryOptions(account,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary accountList
 */
export const accountListUsingGET = (
    params?: AccountListUsingGETParams,
 options?: SecondParameter<typeof accountListUsingGETMutator>,signal?: AbortSignal
) => {
      return accountListUsingGETMutator<ApiResult>(
      {url: `/chain/account/list`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getAccountListUsingGETQueryKey = (params?: AccountListUsingGETParams,) => [`/chain/account/list`, ...(params ? [params]: [])] as const;
  

    
export const getAccountListUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof accountListUsingGET>>, TError = unknown>(params?: AccountListUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountListUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountListUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof accountListUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountListUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof accountListUsingGET>>> = ({ signal }) => accountListUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type AccountListUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof accountListUsingGET>>>
export type AccountListUsingGETQueryError = unknown

/**
 * @summary accountList
 */
export const useAccountListUsingGET = <TData = Awaited<ReturnType<typeof accountListUsingGET>>, TError = unknown>(
 params?: AccountListUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountListUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountListUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAccountListUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary accountRuntimeTransactions
 */
export const accountRuntimeTransactionsUsingGET = (
    params: AccountRuntimeTransactionsUsingGETParams,
 options?: SecondParameter<typeof accountRuntimeTransactionsUsingGETMutator>,signal?: AbortSignal
) => {
      return accountRuntimeTransactionsUsingGETMutator<ApiResult>(
      {url: `/chain/account/runtime/transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getAccountRuntimeTransactionsUsingGETQueryKey = (params: AccountRuntimeTransactionsUsingGETParams,) => [`/chain/account/runtime/transactions`, ...(params ? [params]: [])] as const;
  

    
export const getAccountRuntimeTransactionsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>, TError = unknown>(params: AccountRuntimeTransactionsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountRuntimeTransactionsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountRuntimeTransactionsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>> = ({ signal }) => accountRuntimeTransactionsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type AccountRuntimeTransactionsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>>
export type AccountRuntimeTransactionsUsingGETQueryError = unknown

/**
 * @summary accountRuntimeTransactions
 */
export const useAccountRuntimeTransactionsUsingGET = <TData = Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>, TError = unknown>(
 params: AccountRuntimeTransactionsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof accountRuntimeTransactionsUsingGET>>, TError, TData>, request?: SecondParameter<typeof accountRuntimeTransactionsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAccountRuntimeTransactionsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Block by height
 */
export const blockDetailUsingGET = (
    height: number,
 options?: SecondParameter<typeof blockDetailUsingGETMutator>,signal?: AbortSignal
) => {
      return blockDetailUsingGETMutator<ApiResult>(
      {url: `/chain/block/${height}`, method: 'get', signal
    },
      options);
    }
  

export const getBlockDetailUsingGETQueryKey = (height: number,) => [`/chain/block/${height}`] as const;
  

    
export const getBlockDetailUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof blockDetailUsingGET>>, TError = unknown>(height: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof blockDetailUsingGET>>, TError, TData>, request?: SecondParameter<typeof blockDetailUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof blockDetailUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBlockDetailUsingGETQueryKey(height);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof blockDetailUsingGET>>> = ({ signal }) => blockDetailUsingGET(height, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(height), ...queryOptions}}

export type BlockDetailUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof blockDetailUsingGET>>>
export type BlockDetailUsingGETQueryError = unknown

/**
 * @summary Block by height
 */
export const useBlockDetailUsingGET = <TData = Awaited<ReturnType<typeof blockDetailUsingGET>>, TError = unknown>(
 height: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof blockDetailUsingGET>>, TError, TData>, request?: SecondParameter<typeof blockDetailUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getBlockDetailUsingGETQueryOptions(height,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Block list
 */
export const latestBlocksUsingGET = (
    params?: LatestBlocksUsingGETParams,
 options?: SecondParameter<typeof latestBlocksUsingGETMutator>,signal?: AbortSignal
) => {
      return latestBlocksUsingGETMutator<ApiResult>(
      {url: `/chain/blocks`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getLatestBlocksUsingGETQueryKey = (params?: LatestBlocksUsingGETParams,) => [`/chain/blocks`, ...(params ? [params]: [])] as const;
  

    
export const getLatestBlocksUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof latestBlocksUsingGET>>, TError = unknown>(params?: LatestBlocksUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof latestBlocksUsingGET>>, TError, TData>, request?: SecondParameter<typeof latestBlocksUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof latestBlocksUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLatestBlocksUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof latestBlocksUsingGET>>> = ({ signal }) => latestBlocksUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type LatestBlocksUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof latestBlocksUsingGET>>>
export type LatestBlocksUsingGETQueryError = unknown

/**
 * @summary Block list
 */
export const useLatestBlocksUsingGET = <TData = Awaited<ReturnType<typeof latestBlocksUsingGET>>, TError = unknown>(
 params?: LatestBlocksUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof latestBlocksUsingGET>>, TError, TData>, request?: SecondParameter<typeof latestBlocksUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getLatestBlocksUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary getBlockByProposer
 */
export const getBlockByProposerUsingGET = (
    params?: GetBlockByProposerUsingGETParams,
 options?: SecondParameter<typeof getBlockByProposerUsingGETMutator>,signal?: AbortSignal
) => {
      return getBlockByProposerUsingGETMutator<ApiResult>(
      {url: `/chain/getBlockByProposer`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetBlockByProposerUsingGETQueryKey = (params?: GetBlockByProposerUsingGETParams,) => [`/chain/getBlockByProposer`, ...(params ? [params]: [])] as const;
  

    
export const getGetBlockByProposerUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof getBlockByProposerUsingGET>>, TError = unknown>(params?: GetBlockByProposerUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBlockByProposerUsingGET>>, TError, TData>, request?: SecondParameter<typeof getBlockByProposerUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getBlockByProposerUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBlockByProposerUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlockByProposerUsingGET>>> = ({ signal }) => getBlockByProposerUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetBlockByProposerUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof getBlockByProposerUsingGET>>>
export type GetBlockByProposerUsingGETQueryError = unknown

/**
 * @summary getBlockByProposer
 */
export const useGetBlockByProposerUsingGET = <TData = Awaited<ReturnType<typeof getBlockByProposerUsingGET>>, TError = unknown>(
 params?: GetBlockByProposerUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBlockByProposerUsingGET>>, TError, TData>, request?: SecondParameter<typeof getBlockByProposerUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetBlockByProposerUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary transactionMethod
 */
export const transactionMethodUsingGET = (
    
 options?: SecondParameter<typeof transactionMethodUsingGETMutator>,signal?: AbortSignal
) => {
      return transactionMethodUsingGETMutator<ApiResult>(
      {url: `/chain/methods`, method: 'get', signal
    },
      options);
    }
  

export const getTransactionMethodUsingGETQueryKey = () => [`/chain/methods`] as const;
  

    
export const getTransactionMethodUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof transactionMethodUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionMethodUsingGET>>, TError, TData>, request?: SecondParameter<typeof transactionMethodUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof transactionMethodUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionMethodUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof transactionMethodUsingGET>>> = ({ signal }) => transactionMethodUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type TransactionMethodUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof transactionMethodUsingGET>>>
export type TransactionMethodUsingGETQueryError = unknown

/**
 * @summary transactionMethod
 */
export const useTransactionMethodUsingGET = <TData = Awaited<ReturnType<typeof transactionMethodUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionMethodUsingGET>>, TError, TData>, request?: SecondParameter<typeof transactionMethodUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTransactionMethodUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary latestTransactions
 */
export const latestTransactionsUsingGET1 = (
    params?: LatestTransactionsUsingGET1Params,
 options?: SecondParameter<typeof latestTransactionsUsingGET1Mutator>,signal?: AbortSignal
) => {
      return latestTransactionsUsingGET1Mutator<ApiResult>(
      {url: `/chain/powerevent`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getLatestTransactionsUsingGET1QueryKey = (params?: LatestTransactionsUsingGET1Params,) => [`/chain/powerevent`, ...(params ? [params]: [])] as const;
  

    
export const getLatestTransactionsUsingGET1QueryOptions = <TData = Awaited<ReturnType<typeof latestTransactionsUsingGET1>>, TError = unknown>(params?: LatestTransactionsUsingGET1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof latestTransactionsUsingGET1>>, TError, TData>, request?: SecondParameter<typeof latestTransactionsUsingGET1Mutator>}
): UseQueryOptions<Awaited<ReturnType<typeof latestTransactionsUsingGET1>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLatestTransactionsUsingGET1QueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof latestTransactionsUsingGET1>>> = ({ signal }) => latestTransactionsUsingGET1(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type LatestTransactionsUsingGET1QueryResult = NonNullable<Awaited<ReturnType<typeof latestTransactionsUsingGET1>>>
export type LatestTransactionsUsingGET1QueryError = unknown

/**
 * @summary latestTransactions
 */
export const useLatestTransactionsUsingGET1 = <TData = Awaited<ReturnType<typeof latestTransactionsUsingGET1>>, TError = unknown>(
 params?: LatestTransactionsUsingGET1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof latestTransactionsUsingGET1>>, TError, TData>, request?: SecondParameter<typeof latestTransactionsUsingGET1Mutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getLatestTransactionsUsingGET1QueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary search
 */
export const searchUsingGET = (
    params: SearchUsingGETParams,
 options?: SecondParameter<typeof searchUsingGETMutator>,signal?: AbortSignal
) => {
      return searchUsingGETMutator<ApiResult>(
      {url: `/chain/search`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getSearchUsingGETQueryKey = (params: SearchUsingGETParams,) => [`/chain/search`, ...(params ? [params]: [])] as const;
  

    
export const getSearchUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof searchUsingGET>>, TError = unknown>(params: SearchUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchUsingGET>>, TError, TData>, request?: SecondParameter<typeof searchUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof searchUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchUsingGET>>> = ({ signal }) => searchUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type SearchUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof searchUsingGET>>>
export type SearchUsingGETQueryError = unknown

/**
 * @summary search
 */
export const useSearchUsingGET = <TData = Awaited<ReturnType<typeof searchUsingGET>>, TError = unknown>(
 params: SearchUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchUsingGET>>, TError, TData>, request?: SecondParameter<typeof searchUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getSearchUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary stakingEvents
 */
export const stakingEventsUsingGET = (
    params: StakingEventsUsingGETParams,
 options?: SecondParameter<typeof stakingEventsUsingGETMutator>,signal?: AbortSignal
) => {
      return stakingEventsUsingGETMutator<ApiResult>(
      {url: `/chain/staking/events`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getStakingEventsUsingGETQueryKey = (params: StakingEventsUsingGETParams,) => [`/chain/staking/events`, ...(params ? [params]: [])] as const;
  

    
export const getStakingEventsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof stakingEventsUsingGET>>, TError = unknown>(params: StakingEventsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof stakingEventsUsingGET>>, TError, TData>, request?: SecondParameter<typeof stakingEventsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof stakingEventsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakingEventsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakingEventsUsingGET>>> = ({ signal }) => stakingEventsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type StakingEventsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof stakingEventsUsingGET>>>
export type StakingEventsUsingGETQueryError = unknown

/**
 * @summary stakingEvents
 */
export const useStakingEventsUsingGET = <TData = Awaited<ReturnType<typeof stakingEventsUsingGET>>, TError = unknown>(
 params: StakingEventsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof stakingEventsUsingGET>>, TError, TData>, request?: SecondParameter<typeof stakingEventsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getStakingEventsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary stakingEvents
 */
export const stakingEventsUsingGET1 = (
    params: StakingEventsUsingGET1Params,
 options?: SecondParameter<typeof stakingEventsUsingGET1Mutator>,signal?: AbortSignal
) => {
      return stakingEventsUsingGET1Mutator<ApiResult>(
      {url: `/chain/staking/events/info`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getStakingEventsUsingGET1QueryKey = (params: StakingEventsUsingGET1Params,) => [`/chain/staking/events/info`, ...(params ? [params]: [])] as const;
  

    
export const getStakingEventsUsingGET1QueryOptions = <TData = Awaited<ReturnType<typeof stakingEventsUsingGET1>>, TError = unknown>(params: StakingEventsUsingGET1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof stakingEventsUsingGET1>>, TError, TData>, request?: SecondParameter<typeof stakingEventsUsingGET1Mutator>}
): UseQueryOptions<Awaited<ReturnType<typeof stakingEventsUsingGET1>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakingEventsUsingGET1QueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakingEventsUsingGET1>>> = ({ signal }) => stakingEventsUsingGET1(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type StakingEventsUsingGET1QueryResult = NonNullable<Awaited<ReturnType<typeof stakingEventsUsingGET1>>>
export type StakingEventsUsingGET1QueryError = unknown

/**
 * @summary stakingEvents
 */
export const useStakingEventsUsingGET1 = <TData = Awaited<ReturnType<typeof stakingEventsUsingGET1>>, TError = unknown>(
 params: StakingEventsUsingGET1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof stakingEventsUsingGET1>>, TError, TData>, request?: SecondParameter<typeof stakingEventsUsingGET1Mutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getStakingEventsUsingGET1QueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary transactionDetail
 */
export const transactionDetailUsingGET = (
    hash: string,
 options?: SecondParameter<typeof transactionDetailUsingGETMutator>,signal?: AbortSignal
) => {
      return transactionDetailUsingGETMutator<ApiResult>(
      {url: `/chain/transaction/${hash}`, method: 'get', signal
    },
      options);
    }
  

export const getTransactionDetailUsingGETQueryKey = (hash: string,) => [`/chain/transaction/${hash}`] as const;
  

    
export const getTransactionDetailUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof transactionDetailUsingGET>>, TError = unknown>(hash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionDetailUsingGET>>, TError, TData>, request?: SecondParameter<typeof transactionDetailUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof transactionDetailUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailUsingGETQueryKey(hash);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof transactionDetailUsingGET>>> = ({ signal }) => transactionDetailUsingGET(hash, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(hash), ...queryOptions}}

export type TransactionDetailUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof transactionDetailUsingGET>>>
export type TransactionDetailUsingGETQueryError = unknown

/**
 * @summary transactionDetail
 */
export const useTransactionDetailUsingGET = <TData = Awaited<ReturnType<typeof transactionDetailUsingGET>>, TError = unknown>(
 hash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionDetailUsingGET>>, TError, TData>, request?: SecondParameter<typeof transactionDetailUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTransactionDetailUsingGETQueryOptions(hash,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary transactionhistory
 */
export const transactionhistoryUsingGET = (
    
 options?: SecondParameter<typeof transactionhistoryUsingGETMutator>,signal?: AbortSignal
) => {
      return transactionhistoryUsingGETMutator<ApiResult>(
      {url: `/chain/transactionhistory`, method: 'get', signal
    },
      options);
    }
  

export const getTransactionhistoryUsingGETQueryKey = () => [`/chain/transactionhistory`] as const;
  

    
export const getTransactionhistoryUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof transactionhistoryUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionhistoryUsingGET>>, TError, TData>, request?: SecondParameter<typeof transactionhistoryUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof transactionhistoryUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionhistoryUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof transactionhistoryUsingGET>>> = ({ signal }) => transactionhistoryUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type TransactionhistoryUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof transactionhistoryUsingGET>>>
export type TransactionhistoryUsingGETQueryError = unknown

/**
 * @summary transactionhistory
 */
export const useTransactionhistoryUsingGET = <TData = Awaited<ReturnType<typeof transactionhistoryUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionhistoryUsingGET>>, TError, TData>, request?: SecondParameter<typeof transactionhistoryUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTransactionhistoryUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Transaction list
 */
export const latestTransactionsUsingGET = (
    params?: LatestTransactionsUsingGETParams,
 options?: SecondParameter<typeof latestTransactionsUsingGETMutator>,signal?: AbortSignal
) => {
      return latestTransactionsUsingGETMutator<ApiResult>(
      {url: `/chain/transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getLatestTransactionsUsingGETQueryKey = (params?: LatestTransactionsUsingGETParams,) => [`/chain/transactions`, ...(params ? [params]: [])] as const;
  

    
export const getLatestTransactionsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof latestTransactionsUsingGET>>, TError = unknown>(params?: LatestTransactionsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof latestTransactionsUsingGET>>, TError, TData>, request?: SecondParameter<typeof latestTransactionsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof latestTransactionsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLatestTransactionsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof latestTransactionsUsingGET>>> = ({ signal }) => latestTransactionsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type LatestTransactionsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof latestTransactionsUsingGET>>>
export type LatestTransactionsUsingGETQueryError = unknown

/**
 * @summary Transaction list
 */
export const useLatestTransactionsUsingGET = <TData = Awaited<ReturnType<typeof latestTransactionsUsingGET>>, TError = unknown>(
 params?: LatestTransactionsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof latestTransactionsUsingGET>>, TError, TData>, request?: SecondParameter<typeof latestTransactionsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getLatestTransactionsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary network
 */
export const networkUsingGET = (
    
 options?: SecondParameter<typeof networkUsingGETMutator>,signal?: AbortSignal
) => {
      return networkUsingGETMutator<ApiResult>(
      {url: `/dashboard/network`, method: 'get', signal
    },
      options);
    }
  

export const getNetworkUsingGETQueryKey = () => [`/dashboard/network`] as const;
  

    
export const getNetworkUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof networkUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof networkUsingGET>>, TError, TData>, request?: SecondParameter<typeof networkUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof networkUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNetworkUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof networkUsingGET>>> = ({ signal }) => networkUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type NetworkUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof networkUsingGET>>>
export type NetworkUsingGETQueryError = unknown

/**
 * @summary network
 */
export const useNetworkUsingGET = <TData = Awaited<ReturnType<typeof networkUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof networkUsingGET>>, TError, TData>, request?: SecondParameter<typeof networkUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNetworkUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary trendChart
 */
export const trendChartUsingGET = (
    
 options?: SecondParameter<typeof trendChartUsingGETMutator>,signal?: AbortSignal
) => {
      return trendChartUsingGETMutator<ApiResult>(
      {url: `/dashboard/trend`, method: 'get', signal
    },
      options);
    }
  

export const getTrendChartUsingGETQueryKey = () => [`/dashboard/trend`] as const;
  

    
export const getTrendChartUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof trendChartUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof trendChartUsingGET>>, TError, TData>, request?: SecondParameter<typeof trendChartUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof trendChartUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTrendChartUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof trendChartUsingGET>>> = ({ signal }) => trendChartUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type TrendChartUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof trendChartUsingGET>>>
export type TrendChartUsingGETQueryError = unknown

/**
 * @summary trendChart
 */
export const useTrendChartUsingGET = <TData = Awaited<ReturnType<typeof trendChartUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof trendChartUsingGET>>, TError, TData>, request?: SecondParameter<typeof trendChartUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTrendChartUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary proposal
 */
export const proposalUsingGET = (
    params: ProposalUsingGETParams,
 options?: SecondParameter<typeof proposalUsingGETMutator>,signal?: AbortSignal
) => {
      return proposalUsingGETMutator<ApiResult>(
      {url: `/governance/proposal`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getProposalUsingGETQueryKey = (params: ProposalUsingGETParams,) => [`/governance/proposal`, ...(params ? [params]: [])] as const;
  

    
export const getProposalUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof proposalUsingGET>>, TError = unknown>(params: ProposalUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof proposalUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProposalUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof proposalUsingGET>>> = ({ signal }) => proposalUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ProposalUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof proposalUsingGET>>>
export type ProposalUsingGETQueryError = unknown

/**
 * @summary proposal
 */
export const useProposalUsingGET = <TData = Awaited<ReturnType<typeof proposalUsingGET>>, TError = unknown>(
 params: ProposalUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProposalUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary proposalList
 */
export const proposalListUsingGET = (
    
 options?: SecondParameter<typeof proposalListUsingGETMutator>,signal?: AbortSignal
) => {
      return proposalListUsingGETMutator<ApiResult>(
      {url: `/governance/proposallist`, method: 'get', signal
    },
      options);
    }
  

export const getProposalListUsingGETQueryKey = () => [`/governance/proposallist`] as const;
  

    
export const getProposalListUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof proposalListUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalListUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalListUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof proposalListUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProposalListUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof proposalListUsingGET>>> = ({ signal }) => proposalListUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ProposalListUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof proposalListUsingGET>>>
export type ProposalListUsingGETQueryError = unknown

/**
 * @summary proposalList
 */
export const useProposalListUsingGET = <TData = Awaited<ReturnType<typeof proposalListUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalListUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalListUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProposalListUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @deprecated
 * @summary proposals
 */
export const proposalsUsingGET = (
    
 options?: SecondParameter<typeof proposalsUsingGETMutator>,signal?: AbortSignal
) => {
      return proposalsUsingGETMutator<ApiResult>(
      {url: `/governance/proposals`, method: 'get', signal
    },
      options);
    }
  

export const getProposalsUsingGETQueryKey = () => [`/governance/proposals`] as const;
  

    
export const getProposalsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof proposalsUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalsUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof proposalsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProposalsUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof proposalsUsingGET>>> = ({ signal }) => proposalsUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ProposalsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof proposalsUsingGET>>>
export type ProposalsUsingGETQueryError = unknown

/**
 * @deprecated
 * @summary proposals
 */
export const useProposalsUsingGET = <TData = Awaited<ReturnType<typeof proposalsUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalsUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProposalsUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary proposalWithVotes
 */
export const proposalWithVotesUsingGET = (
    params: ProposalWithVotesUsingGETParams,
 options?: SecondParameter<typeof proposalWithVotesUsingGETMutator>,signal?: AbortSignal
) => {
      return proposalWithVotesUsingGETMutator<ApiResult>(
      {url: `/governance/proposalwithvotes`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getProposalWithVotesUsingGETQueryKey = (params: ProposalWithVotesUsingGETParams,) => [`/governance/proposalwithvotes`, ...(params ? [params]: [])] as const;
  

    
export const getProposalWithVotesUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof proposalWithVotesUsingGET>>, TError = unknown>(params: ProposalWithVotesUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalWithVotesUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalWithVotesUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof proposalWithVotesUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProposalWithVotesUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof proposalWithVotesUsingGET>>> = ({ signal }) => proposalWithVotesUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ProposalWithVotesUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof proposalWithVotesUsingGET>>>
export type ProposalWithVotesUsingGETQueryError = unknown

/**
 * @summary proposalWithVotes
 */
export const useProposalWithVotesUsingGET = <TData = Awaited<ReturnType<typeof proposalWithVotesUsingGET>>, TError = unknown>(
 params: ProposalWithVotesUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof proposalWithVotesUsingGET>>, TError, TData>, request?: SecondParameter<typeof proposalWithVotesUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProposalWithVotesUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary votes
 */
export const votesUsingGET = (
    params: VotesUsingGETParams,
 options?: SecondParameter<typeof votesUsingGETMutator>,signal?: AbortSignal
) => {
      return votesUsingGETMutator<ApiResult>(
      {url: `/governance/votes`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getVotesUsingGETQueryKey = (params: VotesUsingGETParams,) => [`/governance/votes`, ...(params ? [params]: [])] as const;
  

    
export const getVotesUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof votesUsingGET>>, TError = unknown>(params: VotesUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof votesUsingGET>>, TError, TData>, request?: SecondParameter<typeof votesUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof votesUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getVotesUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof votesUsingGET>>> = ({ signal }) => votesUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type VotesUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof votesUsingGET>>>
export type VotesUsingGETQueryError = unknown

/**
 * @summary votes
 */
export const useVotesUsingGET = <TData = Awaited<ReturnType<typeof votesUsingGET>>, TError = unknown>(
 params: VotesUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof votesUsingGET>>, TError, TData>, request?: SecondParameter<typeof votesUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getVotesUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Market chart
 */
export const chartUsingGET = (
    
 options?: SecondParameter<typeof chartUsingGETMutator>,signal?: AbortSignal
) => {
      return chartUsingGETMutator<ApiResult>(
      {url: `/market/chart`, method: 'get', signal
    },
      options);
    }
  

export const getChartUsingGETQueryKey = () => [`/market/chart`] as const;
  

    
export const getChartUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof chartUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof chartUsingGET>>, TError, TData>, request?: SecondParameter<typeof chartUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof chartUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChartUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof chartUsingGET>>> = ({ signal }) => chartUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ChartUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof chartUsingGET>>>
export type ChartUsingGETQueryError = unknown

/**
 * @summary Market chart
 */
export const useChartUsingGET = <TData = Awaited<ReturnType<typeof chartUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof chartUsingGET>>, TError, TData>, request?: SecondParameter<typeof chartUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getChartUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Market info
 */
export const infoUsingGET = (
    
 options?: SecondParameter<typeof infoUsingGETMutator>,signal?: AbortSignal
) => {
      return infoUsingGETMutator<ApiResult>(
      {url: `/market/info`, method: 'get', signal
    },
      options);
    }
  

export const getInfoUsingGETQueryKey = () => [`/market/info`] as const;
  

    
export const getInfoUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof infoUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof infoUsingGET>>, TError, TData>, request?: SecondParameter<typeof infoUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof infoUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInfoUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof infoUsingGET>>> = ({ signal }) => infoUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type InfoUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof infoUsingGET>>>
export type InfoUsingGETQueryError = unknown

/**
 * @summary Market info
 */
export const useInfoUsingGET = <TData = Awaited<ReturnType<typeof infoUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof infoUsingGET>>, TError, TData>, request?: SecondParameter<typeof infoUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getInfoUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary runtimeList
 */
export const runtimeListUsingGET = (
    
 options?: SecondParameter<typeof runtimeListUsingGETMutator>,signal?: AbortSignal
) => {
      return runtimeListUsingGETMutator<ApiResult>(
      {url: `/runtime/list`, method: 'get', signal
    },
      options);
    }
  

export const getRuntimeListUsingGETQueryKey = () => [`/runtime/list`] as const;
  

    
export const getRuntimeListUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof runtimeListUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeListUsingGET>>, TError, TData>, request?: SecondParameter<typeof runtimeListUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof runtimeListUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRuntimeListUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof runtimeListUsingGET>>> = ({ signal }) => runtimeListUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type RuntimeListUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof runtimeListUsingGET>>>
export type RuntimeListUsingGETQueryError = unknown

/**
 * @summary runtimeList
 */
export const useRuntimeListUsingGET = <TData = Awaited<ReturnType<typeof runtimeListUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeListUsingGET>>, TError, TData>, request?: SecondParameter<typeof runtimeListUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRuntimeListUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary roundInfo
 */
export const roundInfoUsingGET = (
    params: RoundInfoUsingGETParams,
 options?: SecondParameter<typeof roundInfoUsingGETMutator>,signal?: AbortSignal
) => {
      return roundInfoUsingGETMutator<ApiResult>(
      {url: `/runtime/round/info`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getRoundInfoUsingGETQueryKey = (params: RoundInfoUsingGETParams,) => [`/runtime/round/info`, ...(params ? [params]: [])] as const;
  

    
export const getRoundInfoUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof roundInfoUsingGET>>, TError = unknown>(params: RoundInfoUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof roundInfoUsingGET>>, TError, TData>, request?: SecondParameter<typeof roundInfoUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof roundInfoUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRoundInfoUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof roundInfoUsingGET>>> = ({ signal }) => roundInfoUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type RoundInfoUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof roundInfoUsingGET>>>
export type RoundInfoUsingGETQueryError = unknown

/**
 * @summary roundInfo
 */
export const useRoundInfoUsingGET = <TData = Awaited<ReturnType<typeof roundInfoUsingGET>>, TError = unknown>(
 params: RoundInfoUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof roundInfoUsingGET>>, TError, TData>, request?: SecondParameter<typeof roundInfoUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRoundInfoUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary roundList
 */
export const roundListUsingGET = (
    params: RoundListUsingGETParams,
 options?: SecondParameter<typeof roundListUsingGETMutator>,signal?: AbortSignal
) => {
      return roundListUsingGETMutator<ApiResult>(
      {url: `/runtime/round/list`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getRoundListUsingGETQueryKey = (params: RoundListUsingGETParams,) => [`/runtime/round/list`, ...(params ? [params]: [])] as const;
  

    
export const getRoundListUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof roundListUsingGET>>, TError = unknown>(params: RoundListUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof roundListUsingGET>>, TError, TData>, request?: SecondParameter<typeof roundListUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof roundListUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRoundListUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof roundListUsingGET>>> = ({ signal }) => roundListUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type RoundListUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof roundListUsingGET>>>
export type RoundListUsingGETQueryError = unknown

/**
 * @summary roundList
 */
export const useRoundListUsingGET = <TData = Awaited<ReturnType<typeof roundListUsingGET>>, TError = unknown>(
 params: RoundListUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof roundListUsingGET>>, TError, TData>, request?: SecondParameter<typeof roundListUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRoundListUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary runtimeStats
 */
export const runtimeStatsUsingGET1 = (
    params: RuntimeStatsUsingGET1Params,
 options?: SecondParameter<typeof runtimeStatsUsingGET1Mutator>,signal?: AbortSignal
) => {
      return runtimeStatsUsingGET1Mutator<ApiResult>(
      {url: `/runtime/stats`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getRuntimeStatsUsingGET1QueryKey = (params: RuntimeStatsUsingGET1Params,) => [`/runtime/stats`, ...(params ? [params]: [])] as const;
  

    
export const getRuntimeStatsUsingGET1QueryOptions = <TData = Awaited<ReturnType<typeof runtimeStatsUsingGET1>>, TError = unknown>(params: RuntimeStatsUsingGET1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET1>>, TError, TData>, request?: SecondParameter<typeof runtimeStatsUsingGET1Mutator>}
): UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET1>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRuntimeStatsUsingGET1QueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof runtimeStatsUsingGET1>>> = ({ signal }) => runtimeStatsUsingGET1(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type RuntimeStatsUsingGET1QueryResult = NonNullable<Awaited<ReturnType<typeof runtimeStatsUsingGET1>>>
export type RuntimeStatsUsingGET1QueryError = unknown

/**
 * @summary runtimeStats
 */
export const useRuntimeStatsUsingGET1 = <TData = Awaited<ReturnType<typeof runtimeStatsUsingGET1>>, TError = unknown>(
 params: RuntimeStatsUsingGET1Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET1>>, TError, TData>, request?: SecondParameter<typeof runtimeStatsUsingGET1Mutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRuntimeStatsUsingGET1QueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary runtimeStats
 */
export const runtimeStatsUsingGET2 = (
    params: RuntimeStatsUsingGET2Params,
 options?: SecondParameter<typeof runtimeStatsUsingGET2Mutator>,signal?: AbortSignal
) => {
      return runtimeStatsUsingGET2Mutator<ApiResult>(
      {url: `/runtime/transaction/info`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getRuntimeStatsUsingGET2QueryKey = (params: RuntimeStatsUsingGET2Params,) => [`/runtime/transaction/info`, ...(params ? [params]: [])] as const;
  

    
export const getRuntimeStatsUsingGET2QueryOptions = <TData = Awaited<ReturnType<typeof runtimeStatsUsingGET2>>, TError = unknown>(params: RuntimeStatsUsingGET2Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET2>>, TError, TData>, request?: SecondParameter<typeof runtimeStatsUsingGET2Mutator>}
): UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET2>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRuntimeStatsUsingGET2QueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof runtimeStatsUsingGET2>>> = ({ signal }) => runtimeStatsUsingGET2(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type RuntimeStatsUsingGET2QueryResult = NonNullable<Awaited<ReturnType<typeof runtimeStatsUsingGET2>>>
export type RuntimeStatsUsingGET2QueryError = unknown

/**
 * @summary runtimeStats
 */
export const useRuntimeStatsUsingGET2 = <TData = Awaited<ReturnType<typeof runtimeStatsUsingGET2>>, TError = unknown>(
 params: RuntimeStatsUsingGET2Params, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET2>>, TError, TData>, request?: SecondParameter<typeof runtimeStatsUsingGET2Mutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRuntimeStatsUsingGET2QueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary runtimeStats
 */
export const runtimeStatsUsingGET = (
    params: RuntimeStatsUsingGETParams,
 options?: SecondParameter<typeof runtimeStatsUsingGETMutator>,signal?: AbortSignal
) => {
      return runtimeStatsUsingGETMutator<ApiResult>(
      {url: `/runtime/transaction/list`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getRuntimeStatsUsingGETQueryKey = (params: RuntimeStatsUsingGETParams,) => [`/runtime/transaction/list`, ...(params ? [params]: [])] as const;
  

    
export const getRuntimeStatsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof runtimeStatsUsingGET>>, TError = unknown>(params: RuntimeStatsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET>>, TError, TData>, request?: SecondParameter<typeof runtimeStatsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRuntimeStatsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof runtimeStatsUsingGET>>> = ({ signal }) => runtimeStatsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type RuntimeStatsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof runtimeStatsUsingGET>>>
export type RuntimeStatsUsingGETQueryError = unknown

/**
 * @summary runtimeStats
 */
export const useRuntimeStatsUsingGET = <TData = Awaited<ReturnType<typeof runtimeStatsUsingGET>>, TError = unknown>(
 params: RuntimeStatsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof runtimeStatsUsingGET>>, TError, TData>, request?: SecondParameter<typeof runtimeStatsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRuntimeStatsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary delegators
 */
export const delegatorsUsingGET = (
    params?: DelegatorsUsingGETParams,
 options?: SecondParameter<typeof delegatorsUsingGETMutator>,signal?: AbortSignal
) => {
      return delegatorsUsingGETMutator<ApiResult>(
      {url: `/validator/delegators`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getDelegatorsUsingGETQueryKey = (params?: DelegatorsUsingGETParams,) => [`/validator/delegators`, ...(params ? [params]: [])] as const;
  

    
export const getDelegatorsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof delegatorsUsingGET>>, TError = unknown>(params?: DelegatorsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof delegatorsUsingGET>>, TError, TData>, request?: SecondParameter<typeof delegatorsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof delegatorsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDelegatorsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof delegatorsUsingGET>>> = ({ signal }) => delegatorsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type DelegatorsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof delegatorsUsingGET>>>
export type DelegatorsUsingGETQueryError = unknown

/**
 * @summary delegators
 */
export const useDelegatorsUsingGET = <TData = Awaited<ReturnType<typeof delegatorsUsingGET>>, TError = unknown>(
 params?: DelegatorsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof delegatorsUsingGET>>, TError, TData>, request?: SecondParameter<typeof delegatorsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getDelegatorsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary escrowStats
 */
export const escrowStatsUsingGET = (
    params: EscrowStatsUsingGETParams,
 options?: SecondParameter<typeof escrowStatsUsingGETMutator>,signal?: AbortSignal
) => {
      return escrowStatsUsingGETMutator<ApiResult>(
      {url: `/validator/escrowstats`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getEscrowStatsUsingGETQueryKey = (params: EscrowStatsUsingGETParams,) => [`/validator/escrowstats`, ...(params ? [params]: [])] as const;
  

    
export const getEscrowStatsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof escrowStatsUsingGET>>, TError = unknown>(params: EscrowStatsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof escrowStatsUsingGET>>, TError, TData>, request?: SecondParameter<typeof escrowStatsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof escrowStatsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEscrowStatsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof escrowStatsUsingGET>>> = ({ signal }) => escrowStatsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type EscrowStatsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof escrowStatsUsingGET>>>
export type EscrowStatsUsingGETQueryError = unknown

/**
 * @summary escrowStats
 */
export const useEscrowStatsUsingGET = <TData = Awaited<ReturnType<typeof escrowStatsUsingGET>>, TError = unknown>(
 params: EscrowStatsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof escrowStatsUsingGET>>, TError, TData>, request?: SecondParameter<typeof escrowStatsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getEscrowStatsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary escrowStatsTotal
 */
export const escrowStatsTotalUsingGET = (
    
 options?: SecondParameter<typeof escrowStatsTotalUsingGETMutator>,signal?: AbortSignal
) => {
      return escrowStatsTotalUsingGETMutator<ApiResult>(
      {url: `/validator/escrowtotalchart`, method: 'get', signal
    },
      options);
    }
  

export const getEscrowStatsTotalUsingGETQueryKey = () => [`/validator/escrowtotalchart`] as const;
  

    
export const getEscrowStatsTotalUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>, TError, TData>, request?: SecondParameter<typeof escrowStatsTotalUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEscrowStatsTotalUsingGETQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>> = ({ signal }) => escrowStatsTotalUsingGET(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type EscrowStatsTotalUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>>
export type EscrowStatsTotalUsingGETQueryError = unknown

/**
 * @summary escrowStatsTotal
 */
export const useEscrowStatsTotalUsingGET = <TData = Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof escrowStatsTotalUsingGET>>, TError, TData>, request?: SecondParameter<typeof escrowStatsTotalUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getEscrowStatsTotalUsingGETQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary validatorInfo
 */
export const validatorInfoUsingGET = (
    params?: ValidatorInfoUsingGETParams,
 options?: SecondParameter<typeof validatorInfoUsingGETMutator>,signal?: AbortSignal
) => {
      return validatorInfoUsingGETMutator<ApiResult>(
      {url: `/validator/info`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getValidatorInfoUsingGETQueryKey = (params?: ValidatorInfoUsingGETParams,) => [`/validator/info`, ...(params ? [params]: [])] as const;
  

    
export const getValidatorInfoUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof validatorInfoUsingGET>>, TError = unknown>(params?: ValidatorInfoUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validatorInfoUsingGET>>, TError, TData>, request?: SecondParameter<typeof validatorInfoUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof validatorInfoUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidatorInfoUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof validatorInfoUsingGET>>> = ({ signal }) => validatorInfoUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ValidatorInfoUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof validatorInfoUsingGET>>>
export type ValidatorInfoUsingGETQueryError = unknown

/**
 * @summary validatorInfo
 */
export const useValidatorInfoUsingGET = <TData = Awaited<ReturnType<typeof validatorInfoUsingGET>>, TError = unknown>(
 params?: ValidatorInfoUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validatorInfoUsingGET>>, TError, TData>, request?: SecondParameter<typeof validatorInfoUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getValidatorInfoUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary validators
 */
export const validatorsUsingGET = (
    params?: ValidatorsUsingGETParams,
 options?: SecondParameter<typeof validatorsUsingGETMutator>,signal?: AbortSignal
) => {
      return validatorsUsingGETMutator<ApiResult>(
      {url: `/validator/list`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getValidatorsUsingGETQueryKey = (params?: ValidatorsUsingGETParams,) => [`/validator/list`, ...(params ? [params]: [])] as const;
  

    
export const getValidatorsUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof validatorsUsingGET>>, TError = unknown>(params?: ValidatorsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validatorsUsingGET>>, TError, TData>, request?: SecondParameter<typeof validatorsUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof validatorsUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidatorsUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof validatorsUsingGET>>> = ({ signal }) => validatorsUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ValidatorsUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof validatorsUsingGET>>>
export type ValidatorsUsingGETQueryError = unknown

/**
 * @summary validators
 */
export const useValidatorsUsingGET = <TData = Awaited<ReturnType<typeof validatorsUsingGET>>, TError = unknown>(
 params?: ValidatorsUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validatorsUsingGET>>, TError, TData>, request?: SecondParameter<typeof validatorsUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getValidatorsUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary network
 */
export const networkUsingGET1 = (
    
 options?: SecondParameter<typeof networkUsingGET1Mutator>,signal?: AbortSignal
) => {
      return networkUsingGET1Mutator<ApiResult>(
      {url: `/validator/network`, method: 'get', signal
    },
      options);
    }
  

export const getNetworkUsingGET1QueryKey = () => [`/validator/network`] as const;
  

    
export const getNetworkUsingGET1QueryOptions = <TData = Awaited<ReturnType<typeof networkUsingGET1>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof networkUsingGET1>>, TError, TData>, request?: SecondParameter<typeof networkUsingGET1Mutator>}
): UseQueryOptions<Awaited<ReturnType<typeof networkUsingGET1>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNetworkUsingGET1QueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof networkUsingGET1>>> = ({ signal }) => networkUsingGET1(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type NetworkUsingGET1QueryResult = NonNullable<Awaited<ReturnType<typeof networkUsingGET1>>>
export type NetworkUsingGET1QueryError = unknown

/**
 * @summary network
 */
export const useNetworkUsingGET1 = <TData = Awaited<ReturnType<typeof networkUsingGET1>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof networkUsingGET1>>, TError, TData>, request?: SecondParameter<typeof networkUsingGET1Mutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNetworkUsingGET1QueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary validatorStat
 */
export const validatorStatUsingGET = (
    params?: ValidatorStatUsingGETParams,
 options?: SecondParameter<typeof validatorStatUsingGETMutator>,signal?: AbortSignal
) => {
      return validatorStatUsingGETMutator<ApiResult>(
      {url: `/validator/stats`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getValidatorStatUsingGETQueryKey = (params?: ValidatorStatUsingGETParams,) => [`/validator/stats`, ...(params ? [params]: [])] as const;
  

    
export const getValidatorStatUsingGETQueryOptions = <TData = Awaited<ReturnType<typeof validatorStatUsingGET>>, TError = unknown>(params?: ValidatorStatUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validatorStatUsingGET>>, TError, TData>, request?: SecondParameter<typeof validatorStatUsingGETMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof validatorStatUsingGET>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidatorStatUsingGETQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof validatorStatUsingGET>>> = ({ signal }) => validatorStatUsingGET(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ValidatorStatUsingGETQueryResult = NonNullable<Awaited<ReturnType<typeof validatorStatUsingGET>>>
export type ValidatorStatUsingGETQueryError = unknown

/**
 * @summary validatorStat
 */
export const useValidatorStatUsingGET = <TData = Awaited<ReturnType<typeof validatorStatUsingGET>>, TError = unknown>(
 params?: ValidatorStatUsingGETParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validatorStatUsingGET>>, TError, TData>, request?: SecondParameter<typeof validatorStatUsingGETMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getValidatorStatUsingGETQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


